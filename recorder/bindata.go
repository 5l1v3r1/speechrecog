package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x4d\x8f\xd3\x30\x10\xbd\xef\xaf\x18\x7c\x4f\xc2\x11\x21\xa7\x08\x69\x85\x84\xc4\x09\x4e\x1c\x5d\x7b\xba\x31\xb8\x76\x64\x4f\x76\xb7\x8a\xf2\xdf\x19\xdb\x49\x37\x85\x43\xc5\xa9\x79\xf3\x3c\x1f\xcf\xf3\x5c\xf9\xce\x04\x4d\x97\x11\x61\xa0\xb3\x3b\x3c\xc8\xfa\x03\x20\x07\x54\x26\x7f\xf0\xe7\x19\x49\x81\x1e\x54\x4c\x48\xbd\x98\xe8\xd4\x7c\x10\x2b\x45\x96\x1c\x1e\xbe\xa3\x0e\xd1\x60\x94\x5d\xc5\x0f\x95\x74\xd6\xff\x86\x88\xae\x17\x89\x2e\x0e\xd3\x80\x48\x02\x72\xb7\x5e\x10\xbe\x52\xa7\x53\x12\x30\x44\x3c\xf5\xa2\x2b\x47\xda\x1c\x59\x4b\x27\x1d\xed\x48\x90\xa2\xce\x6c\x01\xed\x2f\x66\xe5\x0a\xca\x94\xdd\x36\xa6\x3c\x06\x73\xd9\x86\x52\x47\x87\x60\x0d\xf7\x55\xe7\x91\x1b\x0b\xd0\xe8\x5c\x1a\x95\xb6\xfe\xa9\x17\xef\x2b\x1e\x95\x31\x2b\xae\x89\x39\x35\x97\xd9\xa7\x36\x39\x70\xe5\x01\xe6\x39\x2a\xff\x84\xd0\xfe\xa8\xfc\xb2\x5c\x29\x49\x11\x9c\x3a\xa2\x6b\x72\xfe\x3c\xb7\x5f\x1f\x97\x65\x97\x9a\x4f\x98\x03\x57\x68\xa0\xfd\x96\xcf\x41\xb3\x2c\x2c\x81\xcc\xfe\xcc\x3c\xdb\x13\xb4\x5f\xac\xc3\x5d\xe9\x9a\xba\x83\x1c\x50\x93\xb1\x01\x74\xf0\x14\x83\x4b\xb7\x64\xbe\xbe\x30\x45\x8d\xeb\xf5\xc5\xb2\x20\x16\xdb\xbe\xa8\xe7\x4f\x3c\xde\x36\xdd\xba\x8d\x52\xab\x7b\x6d\x98\x15\x7f\x57\xfa\xc9\x85\xe0\x18\xc3\x4b\xc2\x08\x26\x60\x02\x1f\x78\x2d\xd3\x38\x86\x48\x40\x03\x42\x9d\x04\x1d\x9e\xd1\x53\x7b\x3b\x65\x57\xc8\x9b\x4b\xf8\x47\x30\xba\x74\x4f\xec\x71\x22\x0a\x1e\xb4\x53\x29\xf5\xa2\xca\x69\x6a\x50\xac\xf6\x93\x5d\xc5\x77\x7a\x79\xf3\x5f\xad\x0c\xcb\x22\xbc\xb6\x7a\x2c\xf0\x7e\x2b\x46\x71\x6f\x9a\x7d\x5b\xe6\x76\x66\xed\x8a\x5b\x57\x60\xec\x73\x31\x1f\x3b\xb3\xc9\x9b\x55\xd6\x63\x7c\x73\x67\x71\xd7\xe1\xb3\x31\xd5\x67\x1f\x65\x57\x23\x1b\x6f\xfd\x38\xd1\x4d\x01\x5e\xc8\x5b\xfa\xaa\x6c\xe3\x37\x4d\x5c\xef\x56\x90\xec\x78\x8e\xfa\xbc\xea\xa0\xfc\xcc\xca\xdf\xc2\x9f\x00\x00\x00\xff\xff\xa5\x7c\xb1\x1c\x2e\x04\x00\x00")

func assets_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_assets_index_html,
		"assets/index.html",
	)
}

func assets_index_html() (*asset, error) {
	bytes, err := assets_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/index.html", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1467999248, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_script_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\x5f\x6f\xdb\xb6\x17\x7d\xcf\xa7\xe0\xef\x49\x0a\xe2\x28\xc9\x6f\x7b\xaa\x17\x14\x89\xed\xae\x5d\xb3\x78\xf0\x5c\xa0\x43\x10\x04\xb2\x78\x1d\x33\xa1\x45\x97\xa2\xe2\x7a\x43\xbe\xfb\x2e\x49\x91\x22\x65\x25\xe9\x0c\xb4\xb1\xa9\x73\x0f\xef\x3f\x9e\x4b\xa5\xcb\xba\x2c\x14\x13\x65\x7a\x48\xfe\x39\x38\x20\xe4\x29\x97\xe4\xe2\xb7\x8b\xaf\x77\xe3\xe9\xf5\x84\x9c\x93\x9f\x87\xcd\xe2\xc7\xf9\xfc\x8f\xbb\xe9\x67\x5c\xfa\xff\xe9\xa9\x5b\x9c\x5c\xcf\x27\xb3\xbb\xcf\x93\xbf\x46\xd3\xb1\x46\x9f\xfd\x34\x74\x24\x39\xa5\x97\xb5\x52\xa2\x34\x2b\x6e\x1b\xc2\x4a\xa6\x58\xce\xd9\xdf\x60\x76\x24\xf8\xf1\x48\x24\xa0\xa2\xa8\xd7\x50\xaa\xec\x1e\xd4\x84\x83\xfe\x7a\xb9\xfb\x44\xd3\x04\x41\xc7\x0b\x83\x4a\x0e\x87\xb1\x59\x86\xdf\x26\x4f\x88\xbc\x62\x95\x82\x12\x64\x9a\x14\x9c\x15\x8f\xc9\x40\x63\xae\xf2\x05\xf0\x43\xe3\x04\x79\x9d\xbe\x10\x25\x9a\xab\xe4\xb0\x87\xf0\x11\x76\xf5\x06\x09\x7d\xba\xc0\x79\x4f\x08\x64\x1b\x09\x1a\x3e\x86\x65\x5e\x73\x95\x36\x0e\x12\xc2\x96\x24\x85\x6c\xbb\x62\xc5\x8a\x9c\x9f\x9f\xc7\xe9\x6a\x09\x88\xf7\xb3\x35\x7d\x36\x7f\x9f\x9d\xe3\x3a\xa3\x36\xfc\x11\xcf\xab\x0a\x2a\xcc\xd5\x4d\x22\xa1\x10\xd2\xe7\x65\x40\x12\x0a\x1c\x14\xb8\x85\xdb\x61\xc7\x76\x06\xf7\x18\x91\xcc\xa5\x31\x97\xe6\x17\xc8\x99\x61\xb1\xb9\x1c\x10\xb7\x3a\x36\x54\x76\xb5\x21\x5a\x0a\x49\x52\xcd\xc6\xd0\xfc\x74\x40\x38\xe8\x92\x45\x6e\x65\xb8\x76\xaf\x56\x43\x84\xfc\xa2\x9f\x0f\xc9\xd1\x11\x6b\x23\xd5\xc6\x85\x46\x5e\xe7\x6b\xe8\xda\xde\xb0\xdb\x61\x80\x43\x47\x3c\xa2\x75\xbc\x03\xb2\x8f\xab\xfe\xce\xa9\x2e\x77\x23\xb7\x59\xea\xb7\xf5\x29\xf6\xe1\x3c\xf8\x70\xce\xfc\x8e\x6d\x24\x0f\x36\x92\x33\x1d\xca\x43\x58\x34\x74\x30\x6d\xc0\x37\x0f\xb7\xdd\xca\x1d\xe8\x7f\x61\xe7\xb7\x35\x6e\x38\xf4\xd6\x5c\xaf\x7c\x60\xc0\xe9\x5b\xcd\xef\xbb\x73\x18\x1b\xa3\x5d\x4b\x92\x3d\xe5\xbc\x86\x16\x81\x86\x5f\x66\x57\x08\x49\x4e\xf0\xeb\x7b\x03\x3c\x4f\xc8\x11\x81\xb2\x10\x14\xbe\xcc\x3e\x8d\xc4\x7a\x23\x4a\x24\x4e\x79\x73\x50\xe2\xb3\x45\x59\x95\x2f\x38\x68\xf7\x94\x74\xd4\xe8\x1f\xd2\xa6\x96\x3d\x3c\x14\x52\x0e\x08\xa3\x6d\x92\x7a\x79\x96\x39\xaf\x20\x3c\x22\xff\x43\xbb\x30\xb1\xdd\x78\xd0\xa6\xac\x39\x1f\x86\xc7\xe5\x1a\xb6\x33\xb1\x4d\x19\x1d\x90\xd0\x71\x4c\x3a\x01\xa4\x0f\xd8\xaa\x95\xd8\x4e\xa4\x14\x52\xbb\xd7\x73\xbe\xba\x75\x8a\xf1\x4e\xa3\x38\x48\xe5\x09\xf6\x0a\xbb\xe7\x4d\x50\x62\xb0\x95\x0c\xeb\x5b\x48\xc8\x15\x34\x25\x4e\x13\x25\x5d\x55\x1b\x6c\x56\x81\xba\x50\x4a\x32\x6c\x2f\x48\x13\x43\x79\xcc\x68\x62\x92\x1b\x28\x82\x79\x30\x12\xfc\x35\x6e\xea\xb8\x1d\x38\x53\xf0\x5d\x8d\x6c\x37\xb9\xe6\x09\x38\xad\xa6\xfc\x28\x69\x6b\xb1\x2f\xe1\x1d\xa3\x58\xbd\x43\xa3\x2c\x94\x84\x8e\xa8\xf5\xa0\x63\xff\x13\x2b\x5f\x11\x50\x47\x99\x6f\x36\x50\xd2\xd1\x8a\x71\x9a\x86\xe6\x61\xfe\xac\x5c\xfe\x97\x58\x69\xa0\x8a\x3f\x1c\x6b\x68\x14\xc7\x1a\xeb\x75\x0f\xba\x13\xab\x15\xe5\x08\xd8\x8d\x35\x34\x77\xb1\xba\xb6\x0a\x71\xae\x1d\x3a\x9d\xb7\x9f\xb6\xd7\x31\xde\x89\x37\x47\x6c\x95\xaf\x37\x1c\xaa\xe3\x85\xa0\x3b\x3d\x63\x03\x92\x86\xd8\xb7\xc6\xfe\x5c\xea\x96\x30\xc4\x85\x93\xaa\x1b\x7e\xf7\xac\xf6\x72\xdb\xf4\xbb\x33\x7b\x72\x42\xe6\xd3\xf1\xf4\x9d\xc7\x12\xb5\x02\x62\x6e\x14\xc4\x8c\xf9\x01\x01\x55\x64\x2f\x52\x47\xee\xc4\xd4\x66\x76\x6a\x09\x64\xf4\x83\x90\x31\xc4\xc6\xb4\x78\xeb\x46\x13\xdd\xd7\xda\x39\x58\x4b\x6e\x54\xde\x86\xff\x9e\xd1\x97\x54\xde\x08\x88\xb5\x6b\x54\x1c\x4d\x63\x09\x0f\xa5\xd8\xdc\x60\xe2\xa5\x97\x14\xb5\x47\x7a\x1b\x7d\x10\x5b\xf4\x0d\xff\x7f\x21\x66\xfb\xc1\xe7\xd9\x26\x97\xe8\x63\xd3\x35\x99\x84\xb5\x78\x82\xa6\x15\xc5\x36\xdc\xc8\x89\x78\xb3\xd6\x27\xe3\x7d\xfb\x35\xae\x49\x50\xb5\x2c\x5d\xae\xe3\x4d\xa3\x5f\xfb\xac\x3d\x85\x8b\x49\xfb\xb6\xd5\x47\xa1\x4f\xce\x7b\xbc\x6e\x6a\x22\xe1\x9b\x99\xac\x45\xce\xf9\x22\x2f\x1e\xc3\x06\xfa\xbe\x92\x7a\x20\xc2\x96\x7c\xfd\xfd\xea\xa3\x52\x9b\x19\x7c\xab\xa1\xf2\xd7\x4e\x7c\x9e\x89\x12\xf5\x88\xee\x2a\x85\xa2\x54\xac\xf2\xf2\x5e\xab\x4d\x4f\xeb\xe8\xf2\x6a\xbc\x41\xff\xa9\xd1\xe6\x9e\xea\x5f\x00\xba\xad\xa0\xb1\x9a\xb4\xae\x0c\xae\x79\x27\x88\xbb\xc3\xf9\x9c\xea\x99\x3d\x20\x96\xbe\xc2\xf6\xab\x60\x8e\x6a\xf6\x7a\xbf\x78\xe3\xe4\xd7\xc9\x1c\x6f\x0a\x4c\x5f\x19\xb6\x4c\xad\x88\xdd\xf6\x1d\x49\x8e\x5a\x27\x06\xe6\x5e\xd0\xd7\x18\xb6\x2d\x82\x84\xa0\xd8\x18\xce\x44\xdf\x70\x75\x72\x83\x6c\x55\x28\x44\xa9\x67\x32\x05\xd9\xb2\x92\x62\x43\xee\x9f\x43\x2e\x72\x33\x87\xfd\x6b\x8c\xd6\xbd\xe7\x43\x9d\xfc\x7f\x03\x00\x00\xff\xff\xaf\x9d\x42\xd4\x4c\x0d\x00\x00")

func assets_script_js_bytes() ([]byte, error) {
	return bindata_read(
		_assets_script_js,
		"assets/script.js",
	)
}

func assets_script_js() (*asset, error) {
	bytes, err := assets_script_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/script.js", size: 3404, mode: os.FileMode(420), modTime: time.Unix(1468001804, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_style_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xe1\x4a\xc4\x30\x10\x84\xff\xf7\x29\x02\xfd\xa3\x60\xa0\x27\x0a\x92\x7b\x9a\x6d\x77\xd3\x2e\x97\x6e\x4a\xb2\xa7\x77\x88\xef\x6e\xda\x20\x78\x56\x25\xff\x36\xf3\xcd\xce\x24\x7d\xc4\xab\x79\x6f\x8c\x51\xba\xa8\x85\xc0\xa3\x38\x33\x90\x28\xa5\x63\x99\xfa\x28\x6a\x3d\xcc\x1c\xae\xce\x64\x90\x6c\x33\x25\xf6\xc7\xe6\xa3\x69\xda\x0c\xf3\x12\x28\x6f\x78\x1f\x13\x52\x72\x46\xa2\xd0\x0a\xce\x90\x46\x2e\x56\x70\xd6\x78\xa3\x7e\x30\x2d\x20\xda\xa1\x18\x03\x0b\xa5\xdd\xf2\x40\x5e\x6f\xfd\x15\x37\xd1\x52\x38\x96\xd1\x99\xe7\xe5\xf2\x53\xe0\x3c\xa7\xac\x76\x98\x38\x54\xf1\xcc\x62\xdf\x18\x75\x72\xe6\xb1\xeb\x76\x40\x72\xa2\x53\x95\xdf\xd1\x2b\xc9\x7d\x2d\x01\xc3\x69\x4c\xf1\x2c\x6b\xbe\x10\x4b\x9d\x96\xd0\x1f\xfc\xcb\x3f\x74\x44\xfc\x13\x46\xa0\x27\xdf\x55\x78\x5f\xba\x3e\x91\xd5\xb8\x38\x73\xd8\x22\x7e\xeb\xf8\x35\xf8\xc5\xd5\x77\xeb\x59\x2f\x91\xf3\x12\xa0\xfc\x0c\x4b\x28\xb6\xb6\x0f\x71\x38\xad\xeb\x3e\x03\x00\x00\xff\xff\x3d\xe6\x28\x32\xd6\x01\x00\x00")

func assets_style_css_bytes() ([]byte, error) {
	return bindata_read(
		_assets_style_css,
		"assets/style.css",
	)
}

func assets_style_css() (*asset, error) {
	bytes, err := assets_style_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/style.css", size: 470, mode: os.FileMode(420), modTime: time.Unix(1467999291, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assets_index_html,
	"assets/script.js": assets_script_js,
	"assets/style.css": assets_style_css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{assets_index_html, map[string]*_bintree_t{
		}},
		"script.js": &_bintree_t{assets_script_js, map[string]*_bintree_t{
		}},
		"style.css": &_bintree_t{assets_style_css, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

