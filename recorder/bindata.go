package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x4d\x8f\xdb\x20\x10\xbd\xef\xaf\x98\x72\xb7\xe9\xb1\xaa\x70\xaa\x4a\xab\x4a\x95\x7a\x6a\x4f\x3d\x12\x98\x5d\xb3\x25\x60\xc1\x78\x3f\x64\xf9\xbf\x77\x30\x76\xd6\x51\x2a\x45\x3d\xc5\xc3\x9b\x8f\xf7\x98\x47\xd4\x07\x1b\x0d\xbd\x0d\x08\x3d\x9d\xfc\xe1\x4e\xd5\x1f\x00\xd5\xa3\xb6\xe5\x83\x3f\x4f\x48\x1a\x4c\xaf\x53\x46\xea\xc4\x48\x0f\xcd\x27\xb1\x42\xe4\xc8\xe3\xe1\x27\x9a\x98\x2c\x26\x25\x6b\x7c\x57\x41\xef\xc2\x1f\x48\xe8\x3b\x91\xe9\xcd\x63\xee\x11\x49\x40\x99\xd6\x09\xc2\x57\x92\x26\x67\x01\x7d\xc2\x87\x4e\xc8\x25\xa5\x2d\x27\x6b\xeb\x6c\x92\x1b\x08\x72\x32\x8c\x3e\xe5\x17\xfd\xdc\x3e\x31\xa8\x64\x05\xfe\x95\x55\x83\xab\x34\x25\x37\x31\xea\x18\xed\xdb\x46\x5d\x1f\x3d\x82\xb3\xcc\x4e\x9f\x06\xa6\x27\xc0\xa0\xf7\x79\xd0\xc6\x85\xc7\x4e\x7c\xac\xf1\xa0\xad\x5d\xe3\x5a\x58\x4a\x4b\x9b\x7d\x69\x53\x0e\xce\x38\xc0\x34\x25\x1d\x1e\x11\xda\x5f\x15\x9f\xe7\x33\xa4\x28\x81\xd7\x47\xf4\x4d\xa9\x9f\xa6\xf6\xfb\xfd\x3c\xef\x4a\x4b\x86\x3d\x70\x87\x06\xda\x1f\x25\x0f\x9a\x79\x66\x09\x64\xf7\x39\xd3\xe4\x1e\xa0\xfd\xe6\x3c\xee\x5a\xd7\xd2\x5d\xc8\x07\x7a\xb4\x2e\x82\x89\x81\x52\xf4\x19\x06\x5e\x47\xd4\x3c\x38\xc4\x80\xe2\x32\xb7\xdc\x66\x1c\x93\xc1\xf5\x36\xd3\xb2\x55\xd6\xde\xf2\xdd\x7f\x61\xb6\x1b\xd9\x75\x85\x4b\x6b\xf9\xda\x30\x7a\xd5\xe9\x37\x37\x82\x63\x8a\x2f\x19\x13\xd8\x88\x19\x42\xe4\x2d\x8d\xc3\x10\x13\x01\xf5\x08\x95\x18\x7a\x3c\x61\xa0\xf6\x92\xb4\x5c\xc0\x8b\x3b\xb9\xd2\x8f\x3e\xdf\xd2\x7e\x1c\x89\x62\x00\xe3\x75\xce\x9d\xa8\x72\x9a\x7a\x28\x56\xcf\x2a\x59\xe3\x1b\xb3\x82\xfd\xaf\x51\x96\x65\x11\x9e\x47\xdd\x2f\xe1\xed\x51\x1c\xa5\xbd\x87\xf6\x63\x19\xdb\x79\x57\x2e\xe6\x5d\x03\xeb\x9e\x17\x2f\xb2\x51\x9b\xb2\x68\xed\x02\xa6\x77\xb3\x2e\x66\x3b\x7c\xb5\xb6\xda\xee\xb3\x92\xf5\x64\xc3\x5d\x18\x46\xba\x68\xc0\x0b\x79\x2f\x5f\x95\x6d\xf8\xa6\x89\xfb\x5d\x0a\x52\x92\x79\xd4\xd7\x56\x89\xf2\xab\x5b\xfe\x4b\xfe\x06\x00\x00\xff\xff\x75\x0b\x09\x6b\x63\x04\x00\x00")

func assets_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_assets_index_html,
		"assets/index.html",
	)
}

func assets_index_html() (*asset, error) {
	bytes, err := assets_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/index.html", size: 1123, mode: os.FileMode(420), modTime: time.Unix(1469122891, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_jswav_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x1a\x5d\x73\xdb\x36\xf2\x3d\xbf\x02\xc9\x8b\x29\x99\xa1\x25\x45\x51\x7d\xd5\xf9\x21\x71\x9a\x36\x37\x97\x5c\x26\xea\x35\x0f\x9d\x4e\x07\x22\x21\x8b\x0e\x45\x6a\x40\xc8\x96\x9b\xea\xbf\xdf\xe2\x7b\xc1\x0f\xd9\x71\xe7\x9a\xce\x58\x12\xb0\xbb\xd8\xef\x0f\xa0\x67\x67\xe4\xb2\xca\x18\x59\xf1\x6a\x43\xd6\x42\x6c\xeb\xef\xcf\xce\xae\x72\xb1\xde\x2d\x93\xb4\xda\x9c\xed\xca\x7c\xbf\xcd\xd3\x2f\x05\x3b\xbb\xae\x6f\xe9\xcd\x93\x68\xb5\x2b\x53\x91\x57\x65\x34\x20\x5f\x9f\x3c\x21\xc4\xfe\x26\x9f\x58\x5a\xf1\x8c\x71\xb5\x41\xe0\x9f\x58\xe7\x75\x52\x95\x59\x55\x32\x72\x41\xca\x5d\x51\xcc\xf1\x3a\xe3\xbc\xe2\x5d\x1b\xb5\xa0\x5c\xb4\x37\xd2\x35\x2d\x4b\x56\xd4\xb0\x33\x41\xcb\xbf\x2b\x70\x96\xc1\xf2\x8a\x16\x35\x0b\xb7\xaa\xed\xb6\x6f\x8b\x33\xba\x41\xa7\x1c\xa4\x30\x56\x86\x64\xcb\x2b\x51\x89\xbb\x2d\x4b\x2c\x37\x81\xdc\x92\x4e\xbe\x22\x51\xc0\x81\xdd\x90\x47\xf0\xea\x96\x94\xec\x96\xfc\x20\x85\x8c\x4e\x2c\x5d\x72\x4b\x6b\x42\x0b\x38\x3a\xbb\x23\x06\x2d\x39\x19\x68\xc6\x0e\x9d\x42\x09\xbe\x33\x8c\x5f\x31\xf1\xdf\x9a\xf1\xf7\x2c\xcb\xa9\x37\x03\xa8\x31\x26\x5a\x1a\xcf\x00\xe6\x4d\xa9\xc0\x6f\x11\xc2\x99\xd8\xf1\x72\x6e\x7e\x1f\x10\x0a\xd0\x22\x4f\x2f\xb4\x4e\x30\x86\x23\x67\xad\xd6\x05\x14\x1a\x56\xd2\x1a\xcc\xdd\xe6\xe1\x9e\xd3\x69\x96\x2d\x80\xd3\xf7\x4c\xac\xab\x2c\x32\xe2\xcc\x9f\x20\xba\xde\x62\xfa\x8b\xdb\xe4\x77\x88\x09\x0d\x0a\x9e\x92\x15\x6c\xa1\xe0\x22\x47\xe6\x40\x52\x2a\xd2\x35\x88\x39\x68\x61\x68\x9a\x89\xd4\x56\x84\xd8\x6e\xba\x91\x37\xc6\xa3\xd5\xd2\xa1\x14\xfd\x79\x48\x96\x79\x99\x29\x82\x03\x05\x74\x98\xf7\xba\x64\xb5\xed\xf3\xc8\xa7\x8f\x72\xc9\xb2\x12\x3d\xee\x78\xc4\x93\xb0\x25\x0f\x9d\x51\xe7\xd5\x85\xc9\x28\x33\xb6\x55\x75\x43\x39\x71\x36\xc6\xb0\x5d\x6e\xd0\xb0\x14\xa4\xb1\xb7\x39\x67\xab\x6a\x4f\xb2\x8a\x69\x79\x56\xb0\x00\x38\x8c\x80\xea\xcb\x0c\xf8\x61\x37\xac\x14\x89\xc1\xa8\x99\xf8\x39\xdf\xb0\x6a\x27\xa2\x96\x1e\x2d\xc3\xe6\x28\x83\x1f\x1a\x35\xdc\x8b\xba\xac\x1a\x93\x97\xa3\x11\x52\x66\xaf\x3d\x03\x7f\xed\x32\xac\x54\x4d\x5a\x95\x82\xed\x65\x26\x82\x3c\xf0\x6a\x97\xe5\xd5\xa5\x5e\xb1\x67\x2b\xfd\x55\x3b\x9e\xca\x6c\x6b\xa0\x93\x14\x48\x0a\xa6\x52\x86\x26\xbf\x50\x10\x81\x2d\x10\x3e\x64\xf8\x0f\xb2\x1c\x5c\x28\x4f\xb9\x05\x7f\xac\x6e\x13\x95\xf8\x93\xcf\x7a\x2b\x32\x94\xe3\x30\x29\x1b\x1a\xfa\x7c\xa8\x1c\xb0\x98\x8a\xc8\x90\x4b\x4a\xf8\x63\x20\xf0\x92\x83\xb3\xdc\x66\xac\x16\x79\x49\xa5\xec\x83\x76\xb2\xb6\xca\xee\xd2\x50\x2f\xa4\x2f\x22\x8e\xbb\x2c\xaf\x8f\x30\xd8\x60\x11\x01\xf7\x73\x19\xa4\x02\x55\xef\xba\x32\x01\xda\x77\x07\x03\x4b\x10\xf3\x83\xc1\xbc\x37\x15\x34\xe2\xc7\x96\xc7\xf6\x01\x78\x3b\x6a\xb9\x9d\x2b\xd3\x41\x15\x49\x97\xd8\xc5\xae\x76\xd2\xfb\xa2\x92\xde\xe4\x57\x54\x54\x3c\xc1\xb0\xe4\xcf\x3f\x89\xdf\xb9\x65\xcb\x2f\xb9\xf8\x31\xdc\x37\x8c\x78\xa8\x4d\xf5\xc7\x8f\xbd\x24\x36\x35\xde\x43\x72\x3e\x05\x3e\xbc\x58\xf7\x05\x6a\xba\x8c\x4e\x02\x99\x06\x24\xd7\x09\x80\xde\xd0\xbc\xa0\xcb\x82\x25\x27\xb1\xd6\xd5\xdc\x87\xe6\x78\xe4\x7e\xb5\xf3\x18\x30\x90\xa4\xb4\x28\xbc\x2a\x62\xf2\x95\xca\x98\xfb\x5e\xe5\xb4\x98\xdc\xe4\x19\x83\x1f\xaa\xad\x38\xc4\x86\x90\xe3\xaf\x59\x8e\x15\x97\x92\x03\x57\xa9\x3d\x27\x4d\x5c\x59\x37\x43\x44\x55\xe1\x43\xfe\xd5\xe7\xc0\xb5\x2d\xce\xb8\x9d\x65\x14\x55\x87\x13\xf0\x36\xb6\xca\x4b\x96\x9d\x90\x0b\xf0\x20\x99\x7e\xaa\x15\x41\x39\x15\x29\xde\x2f\x76\x47\x9c\x76\x1a\xc1\x69\xfa\xa5\xb6\x29\x1b\x2c\xf1\xb3\x5a\xc0\x19\x71\x05\xa5\x31\x92\xb0\x39\x80\x8d\x62\x52\xb0\x52\x15\x07\x09\x97\xc0\x8f\x2b\xb1\x9e\xc3\xde\x3f\xe5\xc6\x9c\x9c\x9e\xe6\x8d\xfa\xa9\x00\x7f\xcd\x7f\x6b\x95\x67\x97\x6a\x91\xb7\x4b\x7d\xc8\xb3\x38\xdb\xd5\xd2\xf8\x38\x55\xba\x7c\xd0\x08\x88\x30\x9d\x22\x7d\x75\x12\x69\x87\x9e\xf6\xa0\xce\x23\xb1\x5b\x49\xb6\x1a\xec\x44\x26\xc7\x06\xcb\x10\x26\x66\x59\x87\x19\xde\x34\xd2\xf7\x49\x07\x59\xbb\xab\x36\xdc\xc3\xa0\x52\x9a\x0a\x3d\x9c\xf2\xad\x7c\x78\x0d\xce\xf8\x7a\xd0\x28\xe1\x46\xe2\xfa\x89\x0b\x57\xe2\x40\xcf\x87\x81\x64\xa1\x7f\x68\xf8\x09\x3a\x61\x18\x19\x6e\x72\x76\x1b\x8c\x0d\x72\x01\x28\xc9\x0f\xc7\xa0\x86\x45\x75\x13\x2c\xf7\x3a\x17\xf5\x47\xc6\x17\x74\xb3\x2d\x58\x97\x9b\x1a\xc9\x1d\x51\x95\xd3\xf2\x52\x8c\x67\xd1\x8b\x69\xac\xa2\x19\x35\x5b\x5d\x47\x5c\xfa\xb9\xe3\x5b\xa8\x4f\x26\x0f\xa2\xfe\x66\xc7\x55\x25\xb9\x8f\x3a\x80\x6a\x21\x2f\xa1\x62\x48\x27\x3d\x6b\xac\x7f\x82\x3a\x1f\xdd\x73\x18\xa2\xd0\xd7\x66\x2c\xb7\x38\x96\x03\xf5\x02\xdc\xd0\xed\x58\xad\x28\x4e\xce\xe7\x47\xb5\xf1\x62\x12\x4d\x47\x46\x1b\x00\x0d\x47\x3c\x84\x4d\x29\xd0\xb7\xe8\x1c\x4e\x99\x3c\xc0\xa2\x50\x4f\xde\xb0\x15\xdd\x15\xa2\xd3\xa2\x9e\x6c\xed\xc8\x02\xef\xa3\xfd\x74\x06\xff\xfd\xe3\xa5\xb3\xaa\xec\x39\x3f\xbd\x7b\xfb\xb6\x17\xeb\x5c\x61\xbd\x7c\x39\x9b\x8e\x5f\x7e\x87\xb1\x3e\xbf\xfa\xe5\x87\x5e\xac\xf1\x44\xa2\x4d\x46\xdf\x4d\x67\xd9\x6c\x86\xd1\x9e\xad\x36\x82\x3c\xeb\x47\x9c\x49\xc4\xf1\x08\xa3\xe8\xdc\x4a\x20\xc3\x4b\xe4\x1e\x5c\xe9\xab\x80\x35\xc6\x88\x90\xb1\x37\x54\xfa\xc8\xc7\xcb\xf7\xbd\x27\xbe\x50\x27\xce\xc6\xc0\xea\x78\x36\x0d\x58\xcd\xa8\xa0\xcf\x8e\xda\xe0\x6d\xce\x8a\x2c\xb0\x40\x2a\xdd\x32\x26\x10\x0e\x50\x5f\x97\xd8\xf1\x62\xe2\xda\x4c\x6b\xa5\x4a\xd0\x62\x91\xff\xa1\x5b\x5d\xe9\xce\x43\x12\x05\x38\xd2\x2b\xa5\xbf\x5a\x4c\xc5\x48\xb7\x1c\x92\x75\x47\xef\x94\xbc\x08\xb4\x5e\xcb\x45\xa9\x40\x69\xeb\x23\x1a\x9c\x78\x26\x31\xba\x59\xd3\x4c\xf6\x72\x20\xfd\x56\xcb\x8d\x0e\xd6\x62\xc8\xe5\x7e\xbc\x73\x8d\x87\xe4\x84\xaf\x2d\x3d\xc4\x6e\x54\xb6\xc4\x97\x77\xe2\x18\x69\x99\x1c\x27\x0d\x23\xe0\x33\x24\x4d\x4c\xad\xa8\xd2\x2f\x84\x16\xf9\x55\xd9\x4f\x6f\xda\x32\x2a\x22\x00\x1b\x64\x0b\xb5\x43\x0b\xdd\x6f\xa9\x11\x32\x55\xa7\x95\x42\xc7\x73\x65\x66\xa1\xda\xec\xe5\x6e\xb5\x62\x3c\x88\x74\xbd\x04\x5e\xa4\xbf\xe0\xa1\xc3\x94\x20\x59\x52\xdf\x00\xd5\x5f\xe0\xa7\xa5\x80\xc0\xd6\xca\xb7\x0d\x9c\xa9\x66\x1e\xdf\xb7\x68\x8a\x83\x44\x5e\xb3\xbd\xa6\x35\x9b\x4d\xb1\xe7\x43\xa7\x85\x53\x30\xa7\xf2\x5c\x53\x5c\xa1\xf9\x5c\x2a\x00\x3f\xa4\x39\x9e\x55\xb5\xe7\x9c\xde\xbd\x56\x2b\x11\x20\x9a\x76\x0a\x43\x83\xa9\x6b\x03\x2c\xd5\x78\xae\x30\x42\x49\xc2\x06\x4d\xf7\x62\x9e\x58\xa3\x25\x53\x04\xa1\x1b\x03\x50\x09\x03\x4e\xc1\xe5\x15\xe2\x2b\x11\xe5\xc1\xcd\x81\xc9\xd3\xf2\xdc\x40\xfd\x3e\x37\x6b\x9d\xf8\xb4\x40\x6f\x18\xa7\x57\x2c\x54\x0d\x4c\x33\x31\x81\x69\x0e\x6b\x48\xad\xbe\xcb\xf6\xb6\x52\x81\xaa\xd8\xfe\x6d\xc5\xe5\xa0\xa0\x51\x90\x02\x00\xb7\x0f\x54\x92\xf5\x73\x87\x06\x7c\xee\x89\x43\x9f\x37\x6a\x35\x79\xa3\x66\x47\x57\xab\xa9\x69\xe4\x0f\x44\x17\x95\xc8\x45\xc2\xa2\xd9\xa1\x77\x7b\xae\x56\xbf\x66\xa6\xa1\x7a\x07\x7f\xad\xed\x74\x0d\x80\x2e\xc1\x01\xe8\x35\x6e\x9c\x25\x5f\xa7\x17\xe4\x3d\x15\xeb\x84\x2e\xeb\x28\x6c\x17\xa2\x3c\x26\xd7\xad\xb9\x13\x1b\x4e\xe2\x9f\x91\xc8\xd2\x1f\x36\xf5\x33\x38\x62\xc9\x65\xcb\xc7\x83\x1e\x03\xa6\x67\x7e\x07\xbb\x27\x27\xf7\xfa\x29\x8a\xd2\x4e\x67\xb5\xd3\x84\x42\xbf\x67\x98\x30\xe7\x82\x52\x16\x82\xe7\xe5\x95\x0a\xc7\x4b\xe3\xbf\x91\xf5\xeb\x2e\x27\x36\xc1\xb8\x14\x15\x8d\x34\x95\x23\xc2\xa7\x3c\x9c\x98\xfe\x0e\x1f\x56\x90\xea\x16\xec\x6a\xc7\x21\x15\xee\x60\xfc\x85\x44\x51\xa6\xaa\xfa\x43\x2d\x5f\x3f\xc2\x3d\x1b\xfd\xa0\x07\x6c\xb4\x85\xc8\xf5\xab\xed\x9d\x6d\x2f\x0d\xcf\xcf\xbd\x63\x7b\xa2\xb2\x60\xd8\xf2\x8d\x0a\xd7\xb6\xf6\xcd\xa4\x25\xf7\xda\xf8\x85\xc7\x19\xfa\x63\xbc\xe0\x97\xea\xa2\x0b\x84\x96\xfe\xa3\xfd\xe5\xfe\x84\xe9\xe9\x9f\x92\xe9\x14\xc9\x71\x34\xf7\xdb\x23\x17\xe0\x1b\x5b\x75\xc3\xa8\x35\xe3\xb0\xbb\x6a\x82\xab\x06\xc4\x6c\xe3\x46\x34\x6a\xed\xe8\xf6\x28\x72\x82\xc6\x4d\x13\xe0\xa6\x3f\x96\x9a\x43\x4d\x12\xd2\x0a\xe0\x2b\x0e\x4d\x37\x21\xcb\x63\x43\x2d\x0b\x7b\x65\x68\xcd\x34\xf4\x9a\x96\x5a\xe9\xaf\x10\x4e\x7b\x8d\x30\xc3\x45\xfb\x3c\xca\x4f\xa7\xd3\x18\x95\x54\xdb\xae\x9f\x47\xf8\x7c\xc0\x77\x71\xf7\xc8\xea\xe1\x94\x82\x63\x2f\xcf\xf6\x4e\x31\x0f\xb8\x08\x69\x40\x2a\x1d\x1a\x23\x81\xca\x8a\x9d\x6a\x32\x6c\x4f\x97\xd7\x64\x64\xaf\x93\xed\xda\x45\xbb\x3e\x7c\x63\x04\x3d\x38\x3a\xa5\x18\x8a\x36\xb0\x7f\x1e\x5e\xa3\x57\xab\x15\xe8\x1f\x48\x4c\xa7\x60\x43\xd0\xc1\xd0\x91\x3d\xb5\x27\x84\xb7\x5f\x24\xea\xb2\x90\xa6\x33\x78\x3e\xda\x9f\x8f\xe4\xe4\x26\x3f\x8d\x78\x04\x88\xb1\x80\x87\xf1\xec\xa1\x4c\x0c\x27\x9e\x8d\xe1\xa4\xc1\x48\xc8\xc7\x3b\xd5\x3c\x6a\x52\x7e\x82\x94\x7c\x8c\x42\x4e\x1a\x55\xfa\x03\xfd\xd0\xbc\x01\x6d\xfa\x0b\x9c\x23\xaa\x2b\x1e\xde\xb8\x97\xfe\xea\x51\xca\x90\xf9\xe9\xbc\x61\x0d\x3b\xb7\x63\xdb\x09\xc8\xc7\x8b\x22\x57\xd1\xe4\x30\xcf\x08\xd0\xf4\x30\x9c\xd5\xd2\x99\x2e\xc8\xaf\xbf\xf5\x47\x96\xc4\x08\x63\x4a\xa3\x25\xdb\x5d\xbd\xd6\x96\x32\xbd\x52\x94\x0f\xdd\xa9\x31\x81\x60\x1b\x0f\xfc\xc2\xa0\xab\x94\x69\x4a\xfd\x61\x84\x8b\x0b\xd6\x8c\xa4\x1a\xd4\x2f\xe5\xba\x1d\x7e\x1a\x5c\x53\xcc\x1f\xa9\x4a\xe8\x2c\x75\xc1\x53\xed\xcb\xaa\xa8\x2a\x1e\xd9\x13\x87\x4a\xd1\xa0\x58\x4b\x32\xbc\xe4\x52\x18\x9b\xbc\x8c\xf4\x17\xba\x8f\x34\x31\x18\x56\x21\x53\x1a\x22\x28\x8f\xfc\xc5\x7b\x2f\xa5\x3f\xd8\x56\x9f\xf3\xe6\xee\x4f\xb6\x14\xe8\x2f\x0f\xb8\x11\x6b\xbd\xb3\xa4\xeb\x60\x62\x29\xcd\xfb\x4c\xf8\x38\xfe\xbb\x4e\x8f\x35\x72\x2c\xf3\x20\x12\x5c\xf9\x8c\xda\x5b\xe6\x9a\x25\xd8\x41\x49\x68\xe4\x93\x4d\xf8\xa6\xb4\x48\x79\xbe\x15\x1f\x79\x95\xb2\xba\xae\x78\xe3\x1d\xc2\x70\x79\x14\x25\x1a\x8f\xe4\xe0\x9b\xae\x95\x8c\xad\xbc\x12\xe2\xfe\x8b\xde\x50\x8d\x2f\xb5\xf3\x90\xd3\x42\x8c\x23\x87\x79\x52\x8d\x27\xd2\x0f\x15\xb9\x06\x22\xb5\x22\x42\xb6\x9a\x6f\xe8\x1b\x89\x3a\x0f\x3d\x2f\xb4\x1f\xf0\xd5\xdb\x51\x55\xaa\x37\x03\x83\x88\x83\x49\x3d\x45\x86\xe9\x32\x2f\xb7\x3b\xd5\x36\xa9\x57\x4a\xf5\xeb\x35\x9a\x49\x83\x27\x54\x64\xb8\x70\x46\xe9\x34\xad\x8a\x03\xae\x8a\xa8\x22\x9b\xf8\xdd\x46\xff\x8f\x0f\xf1\x3e\xd0\x7d\x04\xf2\x11\x4d\x15\x92\xd6\x92\xf1\xff\xac\x2e\xdd\x8d\x8b\x25\xed\x6b\x29\xa4\x73\xc6\x0b\x06\xc9\x4b\x75\x25\x4a\x3d\xbe\x29\xc1\x89\xc5\x7a\xac\xa6\x6d\xfa\xfa\x27\x6d\x19\x35\x1c\xb4\xf4\xe8\xe7\x1c\x51\xeb\xed\xfd\x30\xfa\xb0\x29\xd3\x90\x4c\x06\x98\xca\xbd\x77\x01\x1a\x6c\xef\x03\xa6\x3b\xb1\x63\x26\x9b\x0f\x1d\x5d\xc3\x5d\xc8\x56\x6b\xc4\x33\xcc\xa9\xc6\xa4\xc3\xce\xbe\x69\x90\x4c\x47\xd7\x03\x39\xb5\x0f\x4d\xf5\x44\xcf\x28\xbe\x65\xd3\xe5\x16\x52\xa5\xa2\x89\x2e\x53\xed\xbf\xbd\x54\xf5\xa4\xe3\x05\x26\x30\x8d\x49\x46\xba\x5c\x85\x7d\xb3\x76\x83\x15\x79\x47\xb2\xaa\x3c\x11\xf0\x57\xe1\xc4\xca\x1f\xc0\xf3\xf5\xa3\xbd\x0c\xb2\xa5\x7a\x57\x82\x0e\x9b\xae\xc0\x69\xa0\xb3\x5f\xb9\xce\xbe\xb6\x6d\x97\x0e\x16\x98\x76\x5c\xb4\xf4\x47\x50\xf3\x51\x55\xf9\xa5\xc9\xb6\xf8\x6e\xd2\xe4\xf3\xd6\xe4\x1a\x74\xfc\x0f\x9d\x30\x54\xef\xd3\xf2\xd7\x61\x68\xd7\xe1\xe4\xff\x33\x7a\x74\x54\xa2\x47\xce\x21\x2d\x09\xe2\x56\xa2\x89\x89\xbc\x81\x0e\x05\xeb\x9a\x44\xe4\xed\x56\x38\x86\xc0\x08\xa1\x6b\xfd\xb1\x61\x23\x74\xac\xce\x8b\x29\x89\x41\x9d\x17\x04\x08\xe0\xf8\x38\x4e\x95\x56\x9b\x4a\x36\xa8\x41\x40\xeb\xbb\x05\xb3\x93\x48\x4e\xff\x1d\x64\xa2\xae\x98\x35\xf7\x0e\x41\xa0\x86\x23\x91\x91\xf8\xf4\x34\xd6\x9c\xf8\x86\xbb\xe3\x46\xa6\x39\x0d\xb5\x9b\x8f\xf6\x68\xf4\x17\x5b\x9a\xcf\xee\xff\x02\x31\xdf\x5c\xdb\xf2\xbf\x00\x00\x00\xff\xff\x76\x3d\x74\x68\x2f\x28\x00\x00")

func assets_jswav_js_bytes() ([]byte, error) {
	return bindata_read(
		_assets_jswav_js,
		"assets/jswav.js",
	)
}

func assets_jswav_js() (*asset, error) {
	bytes, err := assets_jswav_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/jswav.js", size: 10287, mode: os.FileMode(420), modTime: time.Unix(1468021116, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_script_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x60\x9f\x24\x23\x8e\xda\x74\xc5\x06\xcc\x33\x8a\xc4\x71\xd7\xae\x59\x52\xb8\x29\xd0\x21\x08\x0a\x5a\x3a\x89\x99\x32\xa2\x4b\x51\x71\xb3\x21\xff\x7d\xbc\x88\x12\x49\x53\x4a\x02\x14\x7b\x9a\x81\x20\xb6\xf4\x9d\xc3\x73\xf9\xce\x45\x4a\x2f\xeb\x32\x17\x84\x95\xe9\x08\xfd\xb3\xb3\x83\xd0\x2d\xe6\xe8\xe0\x8f\x83\xcf\x5f\x8e\x4e\x4f\xe6\x68\x8a\x5e\x4d\x9a\x8b\x6f\xcf\xce\x3e\x7c\x39\x7d\x2f\x2f\xbd\x7c\xf1\xc2\x5e\x9c\x9f\x9c\xcd\x17\x5f\xde\xcf\xff\x9a\x9d\x1e\x29\xf4\xfe\x4f\xed\x9d\x8f\xb3\x83\x0f\x73\xe7\xd6\xcb\x5f\x26\x56\x3f\x2e\x8a\xc3\x5a\x08\x56\xca\xcb\x65\x4d\xa9\x95\xc9\x6b\xce\xa1\x14\x0b\xc8\x19\x2f\x80\x0f\xdd\x0d\xe4\x25\xc4\x3a\x82\x48\x49\x04\xc1\x94\xfc\x0d\xda\x27\x24\x3f\xee\x81\x05\xcb\xeb\x1b\xa9\x27\xbb\x02\x31\xa7\xa0\xbe\x1e\xde\xbd\x2b\xd2\x44\x82\xf6\x96\x1a\x95\x8c\x26\xbe\x58\x26\xbf\xcd\x6f\x25\xf2\x98\x54\x02\x4a\xe0\x69\x92\x53\x92\x7f\x4d\xc6\x0a\x73\x8c\x97\x40\x47\xda\x08\x84\x36\xa4\x2c\xd8\x26\x22\xf0\x15\xee\xea\xb5\x14\x68\x03\x0e\xd6\x3a\x84\xc8\x25\x4a\x21\xdb\xac\x48\xbe\x42\xd3\xe9\x34\x08\x5e\x87\x43\x08\xb2\x35\x07\xa5\xf8\x08\x2e\x71\x4d\x45\xda\x98\xaa\x3e\x39\x2e\x73\xa0\x26\x3e\xa4\xbc\xea\x6e\xdd\xeb\xff\xf7\xd6\xc4\xc1\x08\xe4\xac\x94\x06\x8b\x64\xf4\x44\x17\xfa\x0d\xdb\x72\xce\xe5\x8c\xeb\x9b\x0d\x65\xaf\xe1\x8a\x05\x26\x43\x33\x8a\xab\x0a\x2a\x99\xce\xf3\x84\x6b\x87\x6d\xea\xc6\x28\x29\x80\x82\x00\x7b\xe1\x62\x12\xc8\x2e\xe0\x4a\x7a\xc4\x31\xd7\xe2\x5c\xff\x02\xee\xd2\x6a\x8c\xec\xd5\x23\xad\xca\x5c\x6d\x14\x5d\x32\x8e\x52\xa5\x8d\x48\xf1\x17\x63\x44\x41\xb1\xca\x33\x2b\x93\xd7\xae\xc4\x6a\x22\x21\xbf\xa9\xfb\x13\xb4\xbb\x4b\x3a\x4f\x35\x99\x15\xf2\x04\xdf\x40\x28\x7b\x4e\x2e\x26\x0e\x4e\x1a\xd2\x22\x3a\xc3\x03\x90\xb9\x5d\xc5\xc9\x5d\x1d\xde\xcd\xec\x61\x69\x7b\x6c\x1b\xe2\xd6\x9d\xeb\xd6\x9d\xfd\xf6\xc4\xce\x93\x6b\xe3\xc9\xbe\x72\xe5\xda\x4d\x9a\x34\x30\x6d\xc0\xe7\xd7\x17\x61\xe6\x76\xd4\x9f\x5b\x9c\x5d\x8e\x1b\x1d\x3d\xa4\x55\x16\x51\x05\x7c\x43\x80\x16\x0f\x95\x6d\x4b\xda\x40\x58\xca\x75\x4a\xb2\x5b\x4c\x6b\xe8\x10\x52\xf0\xd3\xe2\x58\x42\x92\xe7\xf2\xeb\x6b\x0d\x9c\x26\x68\x17\x41\x99\xb3\x02\x3e\x2d\xde\xcd\xd8\xcd\x9a\x95\x52\x71\x4a\x9b\x12\xf7\xbb\x42\x41\x2a\xbc\xa4\xa0\xcc\x13\xdc\xaa\x96\xf6\x49\xb5\xa9\xd1\xee\xd6\x0a\xe7\x63\x44\x8a\x2e\x76\x51\x3d\x97\x98\x56\xe0\x56\xce\x33\x29\xe7\xc6\xbb\xb7\xc8\xd1\x96\xab\x4e\xff\x6c\x4f\x3c\x81\xcd\x82\x6d\x52\x52\x8c\x91\xeb\x93\x4c\x13\x02\x79\xb2\x73\x50\xb5\x62\x9b\x39\xe7\x8c\x2b\xcb\x23\x15\x19\x66\xd6\xc7\xdb\xc6\x4b\x81\x8b\x56\xc1\x16\x15\xb6\xac\x69\xc4\x54\x7a\xc0\x24\xd9\x4d\x7d\xce\x01\x0b\x68\xb2\x9f\x26\x82\xdb\x84\x37\xd8\xac\x02\x71\x20\x04\x27\x92\x90\x90\x26\x5a\xe5\x1e\x29\x12\x1d\x77\xa7\x87\xe8\x1b\x33\x46\x87\x74\x17\x56\xb7\x05\x67\x02\xbe\x8b\x99\x21\x9a\xe5\x95\xa3\xd3\x74\xa1\xc7\x2a\xed\x24\xb6\xe7\x52\x20\xe4\x8f\x24\x57\x28\x73\x9b\x48\xd0\x06\x23\x68\xdf\xfe\xc4\x50\xc8\x03\x2a\x2f\xf1\x7a\x0d\x65\x31\x5b\x11\x5a\xa4\xae\xb8\x1b\x3f\xd3\x60\x9f\xe2\x6b\xe1\xf4\xd1\x47\xfb\xea\x0a\xf9\xbe\xfa\x1d\x3e\x82\x0e\x7c\x35\x6d\xdc\x03\x86\xbe\xba\xe2\xd6\x57\x4b\x2b\x17\x67\xe9\x10\x30\x6f\x3b\x6c\xc3\x98\xd6\x88\x07\x87\x72\x85\x6f\xd6\x14\xaa\xbd\x25\x2b\xee\xd4\x54\x76\x94\x34\x8a\x5b\x6a\x6c\x4f\xb2\x30\x85\x2e\xce\x9d\x6d\xa1\xfb\xb1\xe2\x3e\xa8\x0b\xc2\xde\x95\xaa\x60\x39\xdb\xb8\xa5\x4a\x54\xe7\x92\xd7\x94\xed\xb1\xfa\x73\x88\xc0\x68\x53\x23\x0d\xbc\x1b\x52\x67\xf8\x4a\x8f\x28\xcd\x9c\xf3\xfd\x0b\x87\x6f\x25\x6c\x9e\x42\x36\xac\x0c\x95\xea\x06\x04\x34\xa4\x5d\xf3\x1a\x7c\xa6\xc6\x08\x67\xb4\xf2\xfa\x79\x7b\x57\xee\x37\x94\x61\xe5\x6a\x52\xca\xa9\x90\x74\x07\x56\xac\xe6\x39\x0c\x9f\x68\x30\xf6\xc8\x56\x22\xab\x78\xae\x47\x10\xb7\x1d\x3d\xdb\xe0\xdb\xd7\xa4\xe8\x9b\x44\xba\x93\xf9\x2a\xc4\xdd\x5a\x57\x85\xb6\xf4\xf9\xf7\x3d\xa9\x20\x09\x6c\x77\x59\xd3\x0a\x36\x8a\x4c\x74\x3d\x88\x95\xb3\xe4\x54\xc9\x22\x65\x25\x7b\xf9\x21\xc8\x85\x01\x52\x23\x33\x6e\xd2\x69\x89\x25\x51\x1c\x6e\xd8\x2d\x18\x2d\xce\x4d\x9f\x4d\x51\xa6\x9a\x62\xde\xa2\x15\x29\xde\x30\xee\x43\xcc\x69\xcb\x87\x36\x73\xef\xc9\xa6\x1b\xa8\xcb\x48\x87\x98\xaa\x1e\xa1\x72\xea\x4d\x5a\xff\x69\x24\xab\x04\x5b\xbb\xe3\x36\xa6\x28\x68\xab\xa6\xdc\x44\xcd\x4b\x7f\x7e\x0e\x8c\xf1\xb8\xd6\xa3\x8e\x70\xa8\xe7\x41\xc8\x08\x46\x31\xe6\x51\x0a\x36\xf6\xe1\xe4\xba\x92\x14\xc9\xec\xbd\xee\xec\xd0\x63\x26\xd1\xa5\xa2\x56\x1b\x4a\xc9\x9d\xb2\x18\x08\xd2\xd6\xca\x31\xf4\xd0\xf6\xc4\x40\xd6\x6b\x55\x7e\x5d\xc8\xd4\xd6\xa0\xed\x09\x97\xac\x02\x0b\xec\xda\xd8\x3c\x82\xf8\x7b\x94\x2e\xa1\xe8\x8a\xa3\xd3\x14\x6e\x43\x16\xee\x37\xc1\x2d\x6a\xfa\x4a\xda\xef\xf7\xdd\xfe\xd4\x1f\x6b\x50\x96\xb8\xc1\x0e\x2c\x7e\x64\x98\x7e\x44\x46\x7a\x76\xbf\x3e\xdb\x2b\x81\x79\xfb\xc0\x17\xdb\x0d\xa3\x23\xe7\xbf\x28\xf8\xde\x32\x53\xc7\xd5\x9c\xea\xd6\x6b\x66\xdf\x63\x7a\x6e\xbb\xdd\x4b\xd1\x71\x6f\xa2\xa2\x6c\xeb\xe3\x5a\x84\x69\x03\x2b\x7e\xb3\x39\xb2\x8d\x99\xa0\x3d\x91\x32\x1f\xd5\x8e\xd7\x58\x25\xaa\x19\x42\x5e\x73\x56\x23\xdc\xb1\x62\xc7\x27\x6a\x34\x89\x91\xf3\x1a\xbb\x4d\x8f\xb3\x19\xf2\x0f\xf5\x7e\x6d\x6b\x8d\xa4\xdb\x57\x1a\x3b\x76\x70\xd1\xf0\xf5\x6f\x05\xb3\xd1\xae\x92\x14\x96\xca\xb3\xa9\x29\x04\x87\x3f\x7d\x1d\xd1\xad\x97\xfe\x52\x1e\x42\xf9\xe3\x64\xb8\x6a\x23\x35\xfb\x40\x1f\x78\xa8\xca\xb7\x9f\xcc\x07\xda\x6b\x8e\x29\x5d\xe2\xfc\xab\x5b\xab\xdf\x57\x76\xa8\x7c\xfe\xf3\xf8\xad\x10\xeb\x05\x7c\xab\xa1\x6a\xdb\x80\xbc\x2f\x03\x21\x77\xa0\xe2\x4e\xb6\x07\x01\xf9\x0a\x97\x57\xde\x2c\xf1\xc7\xb2\xc2\x6b\xf4\x47\x85\xd6\x23\xb9\x7d\x0d\x19\x16\x97\xc2\x2a\xa5\x75\xa5\x71\xcd\x9b\xc9\x51\x50\x44\xc6\xe6\x54\xf9\x3c\x46\x46\x7d\x25\x0b\xba\x82\x33\x19\xb9\x87\x2a\xb0\x11\x4e\x74\xc9\xa2\x64\xb7\x3b\x72\x37\xf9\xb5\xf9\xed\xea\x1b\x1b\xe2\x44\x2a\xca\x84\xdb\x09\x8a\x5c\xb3\xd2\xe4\xc3\xe9\xc7\x33\xf5\xae\xea\xb9\x09\xbb\x6e\x3e\xbb\xf1\xd6\xe3\x04\xb4\x92\x1b\x9a\x99\xc1\xd9\x12\x57\xf0\xf3\xab\x74\x14\xa1\x7c\xd3\xa3\x38\x7c\xd3\x6f\x20\xfe\xcf\xde\x0f\xcf\xde\xef\x73\x95\x3c\x13\xe0\x30\x3d\xad\x26\x9d\x94\xde\xd7\xc1\x2a\xeb\xea\xc5\x44\xfb\xb2\x5a\xed\xda\xf7\x23\x95\x80\x7f\x03\x00\x00\xff\xff\xac\xf0\xd4\x0c\x94\x17\x00\x00")

func assets_script_js_bytes() ([]byte, error) {
	return bindata_read(
		_assets_script_js,
		"assets/script.js",
	)
}

func assets_script_js() (*asset, error) {
	bytes, err := assets_script_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/script.js", size: 6036, mode: os.FileMode(420), modTime: time.Unix(1469122911, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_style_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xd1\x6a\xf3\x30\x0c\x85\xef\xf3\x14\x86\xde\xfc\x3f\xcc\x90\x76\x1b\x0c\xf7\x69\x94\x48\x4e\x45\x1d\x39\xd8\xea\xd6\x32\xfa\xee\x73\xe2\x15\x5a\xda\x0e\xdf\x89\xf3\x1d\x1d\x1f\x75\x11\x4f\xe6\xbb\x31\x46\xe9\xa8\x16\x02\x0f\xe2\x4c\x4f\xa2\x94\xb6\x65\xea\xa3\xa8\xf5\x30\x72\x38\x39\x93\x41\xb2\xcd\x94\xd8\x6f\x9b\x73\xd3\xc0\x01\x39\x2e\x2c\x72\x9e\x02\x14\x05\x4b\x60\x21\xdb\x85\xd8\xef\x67\xfc\x8b\x51\x77\xce\x6c\xd6\xed\x74\x5c\x98\x55\x86\x71\x0a\x94\x17\xac\x8b\x09\x29\x39\x23\x51\x68\x56\x8f\x90\x06\x2e\xeb\xe1\xa0\xf1\x46\xfd\x62\x56\x80\x68\xfb\x12\x06\x8a\x7f\xba\x0b\x1c\xc8\xeb\xad\xbf\xe2\x22\x9a\x0a\xc7\x32\x38\xf3\x3e\x07\x98\x57\x1c\xed\x6f\xa8\xd7\xf6\x2e\x94\xa2\xf3\x9c\xb2\xda\x7e\xc7\xa1\x1a\x8c\x2c\x17\x60\xf3\x10\x10\xdd\x55\xf9\xbf\xcd\xff\xa7\x45\xde\x30\xe9\x8a\xa1\x4f\x92\x8a\x75\xd0\xef\x87\x14\x0f\x32\xff\x33\xc4\x52\xcb\x8a\xd0\xaf\xfd\xc7\x1f\x74\x44\x7c\x0a\x23\xd0\x9b\x6f\x2b\x7c\x5f\x5e\xad\xda\x6a\x9c\x9c\xa9\xc7\xb9\xea\xea\x32\x78\xe0\xea\xdb\xf9\x6d\x9f\xdf\xfc\xdc\xfc\x04\x00\x00\xff\xff\x95\xbf\x79\x36\x52\x02\x00\x00")

func assets_style_css_bytes() ([]byte, error) {
	return bindata_read(
		_assets_style_css,
		"assets/style.css",
	)
}

func assets_style_css() (*asset, error) {
	bytes, err := assets_style_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/style.css", size: 594, mode: os.FileMode(420), modTime: time.Unix(1468020159, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assets_index_html,
	"assets/jswav.js": assets_jswav_js,
	"assets/script.js": assets_script_js,
	"assets/style.css": assets_style_css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{assets_index_html, map[string]*_bintree_t{
		}},
		"jswav.js": &_bintree_t{assets_jswav_js, map[string]*_bintree_t{
		}},
		"script.js": &_bintree_t{assets_script_js, map[string]*_bintree_t{
		}},
		"style.css": &_bintree_t{assets_style_css, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

